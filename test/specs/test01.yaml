openapi: 3.0.0
info:
  title: Sample Pet Store App
  description: This is a sample server for a pet store.
  termsOfService: http://example.com/terms/
  contact:
    name: API Support
    url: http://www.example.com/support
    email: support@example.com
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.1
externalDocs:
  description: Find more info here
  url: https://example.com
servers:
- url: https://development.gigantic-server.com/v1
  description: Development server
- url: https://staging.gigantic-server.com/v1
  description: Staging server
- url: https://api.gigantic-server.com/v1
  description: Production server
- url: https://{username}.gigantic-server.com:{port}/{basePath}
  description: The production API server
  variables:
    username:
      # note! no enum here means it is an open value
      default: demo
      description: this value is assigned by the service provider, in this example `gigantic-server.com`
    port:
      enum:
        - '8443'
        - '443'
      default: '8443'
    basePath:
      # open meaning there is the opportunity to use special base paths as assigned by the provider, default is `v2`
      default: v2
paths:
  /pets:
    get:
      description: Returns all pets from the system that the user has access to
      responses:
        '200':
          description: A list of pets.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tag'
  /test:
    get:
      description: Returns pets based on ID
      summary: Find pets by ID
      operationId: getPetsById
      responses:
        '200':
          description: pet response
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tag'
        default:
          description: error payload
          content:
            'text/html':
              schema:
                $ref: '#/components/schemas/Category'
      parameters:
      - name: id
        in: path
        description: ID of pet to use
        required: true
        schema:
          type: array
          items:
            type: string  
        style: simple
    post:
      tags:
      - pet
      summary: Updates a pet in the store with form data
      operationId: updatePetWithForm
      parameters:
      - name: petId
        in: path
        description: ID of pet that needs to be updated
        required: true
        schema:
          type: string
      requestBody:
        content:
          'application/x-www-form-urlencoded':
            schema:
              properties:
                name: 
                  description: Updated name of the pet
                  type: string
                status:
                  description: Updated status of the pet
                  type: string
              required:
              - status
      responses:
        '200':
          description: Pet updated.
          content: 
            'application/json': {}
            'application/xml': {}
        '405':
          description: Invalid input
          content: 
            'application/json': {}
            'application/xml': {}
      security:
      - petstore_auth:
        - write:pets
        - read:pets
  /test2:
    post:
      responses:
        default:
          description: Test
      requestBody:
        description: user to add to the system
        content: 
          'application/json':
            schema:
              $ref: '#/components/schemas/Tag'
            examples:
              user:
                summary: User Example
                externalValue: 'http://foo.bar/examples/user-example.json'
          'application/xml':
            schema:
              $ref: '#/components/schemas/Tag'
            examples:
              user:
                summary: User Example in XML
                externalValue: 'http://foo.bar/examples/user-example.xml'
          'text/plain':
            examples:
              user:
                summary: User example in text plain format
                externalValue: 'http://foo.bar/examples/user-example.txt'
          '*/*':
            examples:
              user: 
                summary: User example in other format
                externalValue: 'http://foo.bar/examples/user-example.whatever'
  /test3:
    post:
      responses:
        default:
          description: Test
          content:
            application/json: 
              schema:
                $ref: "#/components/schemas/Tag"
              examples:
                cat:
                  summary: An example of a cat
                  value:
                    name: Fluffy
                    petType: Cat
                    color: White
                    gender: male
                    breed: Persian
                dog:
                  summary: An example of a dog with a cat's name
                  value:
                    name: Puma
                    petType: Dog
                    color: Black
                    gender: Female
                    breed: Mixed
      requestBody:
        description: user to add to the system
        required: true
        content:
          text/plain:
            schema:
              type: array
              items:
                type: string
  /upload:
    post:
      responses:
        default:
          description: Test
      requestBody:
        content:
          application/octet-stream:
            # any media type is accepted, functionally equivalent to `*/*`
            schema:
              # a binary file of any type
              type: string
              format: binary
  /upload2:
    post:
      responses:
        default:
          description: Test
      requestBody:
        content:
            # a binary file of type png or jpeg
          'image/jpeg':
            schema:
              type: string
              format: binary
          'image/png':
            schema:
              type: string
              format: binary
  /upload3:
    post:
      responses:
        default:
          description: A simple string response
          content:
            text/plain:
              schema:
                type: string
              example: 'whoa!'
          headers:
            X-Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            X-Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            X-Rate-Limit-Reset:
              description: The number of seconds left in the current period
              schema:
                type: integer
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                id:
                  type: string
                  format: uuid
                address:
                  # complex types are stringified to support RFC 1866
                  type: object
                  properties: {}
  /test4:
    post:
      responses:
        default:
          description: A simple string response
          content:
            text/plain:
              schema:
                type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                id:
                  type: string
                  format: uuid
                address:
                  # default Content-Type for objects is `application/json`
                  type: object
                  properties: {}
                profileImage:
                  # default Content-Type for string/binary is `application/octet-stream`
                  type: string
                  format: binary
                children:
                  # default Content-Type for arrays is based on the `inner` type (text/plain here)
                  type: array
                  items:
                    type: string
                addresses:
                  # default Content-Type for arrays is based on the `inner` type (object shown, so `application/json` in this example)
                  type: array
                  items:
                    $ref: '#/components/schemas/Tag'
  /test5:
    post:
      responses:
        '200':
          description: a pet to be returned
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
          links:
            address:
              # the target link operationId
              operationId: getUserAddress
              parameters:
                # get the `id` field from the request path parameter named `id`
                userId: $request.path.id
            UserRepositories:
              # returns array of '#/components/schemas/repository'
              operationRef: '#/paths/~12.0~1repositories~1{username}/get'
              parameters:
                username: $response.body#/username
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
      requestBody:
        content:
          multipart/mixed:
            schema:
              type: object
              properties:
                id:
                  # default is text/plain
                  type: string
                  format: uuid
                address:
                  # default is application/json
                  type: object
                  properties: {}
                historyMetadata:
                  # need to declare XML format!
                  description: metadata in XML format
                  type: object
                  properties: {}
                profileImage:
                  # default is application/octet-stream, need to declare an image type only!
                  type: string
                  format: binary
            examples: 
              foo:
                summary: A foo example
                value: {"foo": "bar"}
              bar:
                summary: A bar example
                value: {"bar": "baz"}
            encoding:
              historyMetadata:
                # require XML Content-Type in utf-8 encoding
                contentType: application/xml; charset=utf-8
              profileImage:
                # only accept png/jpeg
                contentType: image/png, image/jpeg
                headers:
                  X-Rate-Limit-Limit:
                    description: The number of allowed requests in the current period
                    schema:
                      type: integer
components:
  schemas:
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
    Address:
      type: object
      required:
      - name
      properties:
        name:
          type: string
        address:
          $ref: '#/components/schemas/Tag'
        age:
          type: integer
          format: int32
          minimum: 0
    Petty:
      type: object
      additionalProperties:
        type: string
    Pets:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/Pet'
    Puma:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      required:
      - name
      example:
        name: Puma
        id: 1
    ErrorModel:
      type: object
      required:
      - message
      - code
      properties:
        message:
          type: string
        code:
          type: integer
          minimum: 100
          maximum: 600
    ExtendedErrorModel:
      allOf:
      - $ref: '#/components/schemas/ErrorModel'
      - type: object
        required:
        - rootCause
        properties:
          rootCause:
            type: string
    Pet:
      type: object
      discriminator:
        propertyName: petType
      properties:
        name:
          type: string
        petType:
          type: string
      required:
      - name
      - petType
    Cat:  ## "Cat" will be used as the discriminator value
      description: A representation of a cat
      allOf:
      - $ref: '#/components/schemas/Pet'
      - type: object
        properties:
          huntingSkill:
            type: string
            description: The measured skill for hunting
            enum:
            - clueless
            - lazy
            - adventurous
            - aggressive
        required:
        - huntingSkill
    Dog:  ## "Dog" will be used as the discriminator value
      description: A representation of a dog
      allOf:
      - $ref: '#/components/schemas/Pet'
      - type: object
        properties:
          packSize:
            type: integer
            format: int32
            description: the size of the pack the dog is from
            default: 0
            minimum: 0
        required:
        - packSize
    Pet1:
      type: object
      required:
      - pet_type
      properties:
        pet_type:
          type: string
      discriminator:
        propertyName: pet_type
        mapping:
          cachorro: Dog
    Cat1:
      allOf:
      - $ref: '#/components/schemas/Pet1'
      - type: object
        # all other properties specific to a `Cat`
        properties:
          name:
            type: string
    Dog1:
      allOf:
      - $ref: '#/components/schemas/Pet1'
      - type: object
        # all other properties specific to a `Dog`
        properties:
          bark:
            type: string
    Lizard1:
      allOf:
      - $ref: '#/components/schemas/Pet1'
      - type: object
        # all other properties specific to a `Lizard`
        properties:
          lovesRocks:
            type: boolean
  parameters:
    skipParam:
      name: skip
      in: query
      description: number of items to skip
      required: true
      schema:
        type: integer
        format: int32
    limitParam:
      name: limit
      in: query
      description: max records to return
      required: true
      schema:
        type: integer
        format: int32
    test:
      name: token
      in: header
      description: token to be passed as a header
      required: true
      schema:
        type: array
        items:
          type: integer
          format: int64
      style: simple
    test2:
      name: username
      in: path
      description: username to fetch
      required: true
      schema:
        type: string
    test3:
      name: id
      in: query
      description: ID of the object to fetch
      required: false
      schema:
        type: array
        items:
          type: string
      style: form
      explode: true
    test4:
      in: query
      name: freeForm
      schema:
        type: object
        additionalProperties:
          type: integer
      style: form
    test5:
      in: query
      name: coordinates
      content:
        application/json:
          schema:
            type: object
            required:
              - lat
              - long
            properties:
              lat:
                type: number
              long:
                type: number
  responses:
    NotFound:
      description: Entity not found.
    IllegalInput:
      description: Illegal input for operation.
    GeneralError:
      description: General Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Tag'
  securitySchemes:
    api_key:
      type: apiKey
      name: api_key
      in: header
    petstore_auth:
      type: oauth2
      flows: 
        implicit:
          authorizationUrl: http://example.org/api/oauth/dialog
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
  callbacks:
    myWebhook:
      'http://notificationServer.com?transactionId={$request.body#/id}&email={$request.body#/email}':
        post:
          requestBody:
            description: Callback payload
            content: 
              'application/json':
                schema:
                  $ref: '#/components/schemas/Tag'
          responses:
            '200':
              description: webhook successfully processed and no retries will be performed
